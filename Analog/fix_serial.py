#!/usr/bin/env python3
"""
ESP32 LDR Serial Connection Fixer
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ serial connection ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
"""

import serial
import time
import sys

def check_serial_ports():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö serial ports ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    import serial.tools.list_ports
    
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Ports ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:")
    ports = serial.tools.list_ports.comports()
    
    if not ports:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö serial ports")
        return []
    
    for i, port in enumerate(ports):
        print(f"  {i+1}. {port.device} - {port.description}")
    
    return [port.device for port in ports]

def test_serial_connection(port, baud_rate=115200):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ serial"""
    print(f"\nüîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {port}...")
    
    try:
        ser = serial.Serial(port, baud_rate, timeout=2)
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {port}")
        
        # ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        print("‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32 (5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)...")
        start_time = time.time()
        data_received = False
        
        while time.time() - start_time < 5:
            if ser.in_waiting:
                try:
                    line = ser.readline().decode('utf-8').strip()
                    if line:
                        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {line}")
                        data_received = True
                except:
                    pass
            time.sleep(0.1)
        
        if data_received:
            print("‚úÖ ESP32 ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥")
        else:
            print("‚ö†Ô∏è  ESP32 ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ESP32 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        
        ser.close()
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
        return False

def fix_serial_connection():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ serial connection"""
    print("üîß ESP32 Serial Connection Fixer")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ports
    ports = check_serial_ports()
    
    if not ports:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö serial ports")
        print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ESP32 ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        return None
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ port
    working_ports = []
    for port in ports:
        if test_serial_connection(port):
            working_ports.append(port)
    
    if working_ports:
        print(f"\n‚úÖ Ports ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {working_ports}")
        return working_ports[0]
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ port ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        return None

def create_working_plotter(port):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á plotter ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"""
    plotter_code = f'''#!/usr/bin/env python3
"""
ESP32 LDR Working Real-Time Plotter
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ serial connection ‡πÅ‡∏•‡πâ‡∏ß
"""

import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
import time

# Configuration
SERIAL_PORT = '{port}'  # Port ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
BAUD_RATE = 115200
MAX_POINTS = 100

# Data storage
adc_data = deque(maxlen=MAX_POINTS)
voltage_data = deque(maxlen=MAX_POINTS)
light_data = deque(maxlen=MAX_POINTS)
time_data = deque(maxlen=MAX_POINTS)

# Initialize plot
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 8))
fig.suptitle('ESP32 LDR Real-Time Monitor (Fixed)', fontsize=16)

# Setup subplots
ax1.set_ylabel('ADC Value')
ax1.set_ylim(0, 4095)
ax1.grid(True)
line1, = ax1.plot([], [], 'b-', linewidth=2)

ax2.set_ylabel('Voltage (V)')
ax2.set_ylim(0, 3.3)
ax2.grid(True)
line2, = ax2.plot([], [], 'g-', linewidth=2)

ax3.set_ylabel('Light Level (%)')
ax3.set_ylim(0, 100)
ax3.set_xlabel('Time (seconds)')
ax3.grid(True)
line3, = ax3.plot([], [], 'r-', linewidth=2)

# Serial connection with error handling
try:
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    print(f"‚úÖ Connected to {{SERIAL_PORT}}")
    print("üìä Real-time plotting started...")
    print("üîç Close the plot window to stop")
except Exception as e:
    print(f"‚ùå Error: {{e}}")
    print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ESP32 ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    exit(1)

def parse_data(line):
    """Parse data from ESP32"""
    try:
        if ',' in line:
            parts = line.strip().split(',')
            if len(parts) >= 3:
                adc = int(parts[0])
                voltage = float(parts[1])
                light = float(parts[2])
                return adc, voltage, light
    except:
        pass
    return None

def animate(frame):
    """Real-time animation"""
    global adc_data, voltage_data, light_data, time_data
    
    # Read data from serial with error handling
    try:
        if ser.in_waiting:
            line = ser.readline().decode('utf-8').strip()
            if line:
                data = parse_data(line)
                if data:
                    adc, voltage, light = data
                    
                    # Add to data arrays
                    current_time = time.time()
                    adc_data.append(adc)
                    voltage_data.append(voltage)
                    light_data.append(light)
                    time_data.append(current_time)
                    
                    # Print current values
                    print(f"ADC: {{adc:4d}} | Voltage: {{voltage:5.2f}}V | Light: {{light:5.1f}}%")
    except Exception as e:
        print(f"Serial read error: {{e}}")
        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    
    # Update plots
    if len(time_data) > 1:
        # Convert time to relative seconds
        time_rel = [(t - time_data[0]) for t in time_data]
        
        # Update line data
        line1.set_data(time_rel, list(adc_data))
        line2.set_data(time_rel, list(voltage_data))
        line3.set_data(time_rel, list(light_data))
        
        # Update axis limits for scrolling
        if len(time_rel) > 1:
            x_min = max(0, time_rel[-1] - 20)
            x_max = time_rel[-1] + 1
            
            ax1.set_xlim(x_min, x_max)
            ax2.set_xlim(x_min, x_max)
            ax3.set_xlim(x_min, x_max)
    
    return line1, line2, line3

# Start animation
print("üöÄ Starting animation...")
ani = animation.FuncAnimation(fig, animate, interval=100, blit=False)

try:
    plt.tight_layout()
    plt.show()
except KeyboardInterrupt:
    print("\\n‚èπÔ∏è  Stopping...")

# Cleanup
ser.close()
print("üîå Serial connection closed")
'''
    
    with open('/Users/kbbk/Week-11-Microcontroller-applications/Analog/working_plotter.py', 'w') as f:
        f.write(plotter_code)
    
    print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå working_plotter.py ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö port {port}")

if __name__ == "__main__":
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ serial connection
    working_port = fix_serial_connection()
    
    if working_port:
        print(f"\nüéØ ‡πÉ‡∏ä‡πâ port: {working_port}")
        create_working_plotter(working_port)
        print("\nüöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("1. Flash ‡πÇ‡∏Ñ‡πâ‡∏î ESP32:")
        print(f"   idf.py -p {working_port} flash monitor")
        print("2. ‡∏£‡∏±‡∏ô plotter:")
        print("   python3 working_plotter.py")
    else:
        print("\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ESP32 ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ serial port")
        print("3. ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô USB cable")
        print("4. ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô USB port")

